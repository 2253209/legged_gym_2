"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class tau_mapping_lcmt(object):

    __slots__ = ["tau_est", "timestamp_us", "id", "robot_id"]

    __typenames__ = ["float", "int64_t", "int64_t", "int64_t"]

    __dimensions__ = [[4], None, None, None]

    def __init__(self):
        self.tau_est = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: float[4] """
        self.timestamp_us = 0
        """ LCM Type: int64_t """
        self.id = 0
        """ LCM Type: int64_t """
        self.robot_id = 0
        """ LCM Type: int64_t """

    def encode(self):
        buf = BytesIO()
        buf.write(tau_mapping_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>4f', *self.tau_est[:4]))
        buf.write(struct.pack(">qqq", self.timestamp_us, self.id, self.robot_id))

    @staticmethod
    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != tau_mapping_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return tau_mapping_lcmt._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = tau_mapping_lcmt()
        self.tau_est = struct.unpack('>4f', buf.read(16))
        self.timestamp_us, self.id, self.robot_id = struct.unpack(">qqq", buf.read(24))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if tau_mapping_lcmt in parents: return 0
        tmphash = (0xf8222c17e895ec24) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if tau_mapping_lcmt._packed_fingerprint is None:
            tau_mapping_lcmt._packed_fingerprint = struct.pack(">Q", tau_mapping_lcmt._get_hash_recursive([]))
        return tau_mapping_lcmt._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", tau_mapping_lcmt._get_packed_fingerprint())[0]

